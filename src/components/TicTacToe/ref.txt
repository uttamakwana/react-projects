/* eslint-disable react/prop-types */
import { useState } from "react";
// css
import "./tictactoe.css";

const Sqaure = ({
  index,
  count,
  setCount,
  sqaures,
  setSquares,
  isOver,
  setIsOver,
}) => {
  function handleClick() {
    const copySquares = [...sqaures];
    if (copySquares[index]) {
      return;
    } else {
      setCount((prev) => prev + 1);
      copySquares[index] = count % 2 === 0 ? "x" : "0";
      console.log(findWinner(copySquares, index));
      if (findWinner(copySquares, index).over) {
        setIsOver(true);
        setCount(0);
        findWinner(copySquares, index)?.combo.map((c) => {
          const winButton = document.querySelector(`[data-index='${c}']`);
          winButton.style.backgroundColor = "limegreen";
          winButton.setAttribute("data-win", true);
          console.log(winButton);
        });
      }
      setSquares(copySquares);
    }
  }
  return (
    <button
      className={`${sqaures[index] === "x" ? "red" : "blue"}`}
      style={{
        backgroundColor: `${
          sqaures[index] === "x" && !isOver
            ? "var(--clr-accent)"
            : "transparent"
        }`,
      }}
      data-index={index}
      onClick={handleClick}
      disabled={isOver ? true : false}
    >
      {sqaures[index]}
    </button>
  );
};

const TicTacToe = () => {
  const [squares, setSquares] = useState([...Array(9).fill(null)]);
  const [count, setCount] = useState(0);
  const [isOver, setIsOver] = useState(false);
  return (
    <div className="tictactoe-container absolute-center">
      <h1 className="heading text-center pb-1">TicTacToe Game</h1>
      {squares && squares.length > 0 && (
        <div className="square-container">
          {squares.map((square, index) => (
            <Sqaure
              key={index}
              setCount={setCount}
              index={index}
              sqaures={squares}
              count={count}
              isOver={isOver}
              setIsOver={setIsOver}
              setSquares={setSquares}
            />
          ))}
        </div>
      )}
      <button
        className={`play-again-btn ${isOver ? "active" : ""}`}
        disabled={isOver ? false : true}
        style={{ visibility: `${isOver ? "visible" : "hidden"}` }}
        onClick={() => {
          setSquares([...Array(9).fill(null)]);
          setIsOver(false);
          const findAllWinButton =
            document.querySelectorAll('[data-win="true"]');
          findAllWinButton.forEach((btn) => {
            btn.style.backgroundColor = "transparent";
            btn.removeAttribute("data-win");
          });
        }}
      >
        Play Again
      </button>
      )
    </div>
  );
};

export default TicTacToe;

function findWinner(sqaures, index) {
  console.log(sqaures);
  const winningCombos = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];

  for (const combo of winningCombos) {
    const [a, b, c] = combo;
    if (sqaures[a] && sqaures[a] === sqaures[b] && sqaures[a] === sqaures[c]) {
      console.log(a, b, c);
      console.log(sqaures[a], sqaures[b], sqaures[c]);
      return {
        over: true,
        winner: sqaures[index],
        message: `Winner is ${sqaures[index]}`,
        combo,
      };
    }
  }

  if (sqaures.every((s) => s !== null))
    return {
      over: true,
      winner: null,
      message: `Match is draw`,
    };

  return {
    over: false,
    winner: null,
    message: `Winner is yet to declare`,
  };
}
